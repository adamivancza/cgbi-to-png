// Generated by CoffeeScript 1.9.3
(function() {
  var PNGHEADER_BASE64, bufferpack, crc, revertCgBIBuffer, streamToBuffer, streamifier, zlib;

  streamToBuffer = require('stream-to-buffer');

  bufferpack = require('bufferpack');

  streamifier = require('streamifier');

  zlib = require('zlib');

  crc = require('crc');

  PNGHEADER_BASE64 = 'iVBORw0KGgo=';

  module.exports = function(stream, callback) {
    return streamToBuffer(stream, function(err, buffer) {
      var output;
      if (err) {
        return callback(err);
      }
      output = revertCgBIBuffer(buffer);
      return callback(null, streamifier.createReadStream(output));
    });
  };

  module.exports.revert = revertCgBIBuffer = function(buffer) {
    var chunk, chunks, data, dataCrc, headerData, height, i, idatCgbiData, idatData, idat_chunk, isIphoneCompressed, j, k, l, len, newData, offset, output, ref, ref1, uncompressed, width, x, y;
    isIphoneCompressed = false;
    offset = 0;
    idatCgbiData = new Buffer(0);
    chunks = [];
    headerData = buffer.slice(0, 8);
    offset += 8;
    if (headerData.toString('base64') !== PNGHEADER_BASE64) {
      return callback(new Error('not an png file'));
    }
    while (offset < buffer.length) {
      chunk = {};
      data = buffer.slice(offset, offset + 4);
      offset += 4;
      chunk.length = bufferpack.unpack("L>", data, 0)[0];
      data = buffer.slice(offset, offset + 4);
      offset += 4;
      chunk.type = data.toString();
      chunk.data = data = buffer.slice(offset, offset + chunk.length);
      offset += chunk.length;
      dataCrc = buffer.slice(offset, offset + 4);
      offset += 4;
      chunk.crc = bufferpack.unpack("L>", dataCrc, 0)[0];
      if (chunk.type === 'CgBI') {
        isIphoneCompressed = true;
      }
      if (chunk.type === 'IHDR' && isIphoneCompressed) {
        width = bufferpack.unpack('L>', data)[0];
        height = bufferpack.unpack('L>', data, 4)[0];
      }
      if (x === 'IDAT') {
        idatCgbiData = Buffer.concat([idatCgbiData, data]);
        continue;
      }
      if (chunk.type !== 'IDAT' && idatCgbiData.length > 0) {
        uncompressed = zlib.inflateRawSync(idatCgbiData).toString();
        newData = '';
        i = 0;
        for (y = j = 0, ref = height - 1; 0 <= ref ? j <= ref : j >= ref; y = 0 <= ref ? ++j : --j) {
          newData += uncompressed[i];
          i++;
          for (x = k = 0, ref1 = width - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; x = 0 <= ref1 ? ++k : --k) {
            newData += uncompressed[i + 2];
            newData += uncompressed[i + 1];
            newData += uncompressed[i + 0];
            newData += uncompressed[i + 3];
            i += 4;
          }
        }
        idatData = zlib.deflateRawSync(newData);
        idat_chunk = {
          'type': 'IDAT',
          'length': idatData.length,
          'data': idatData,
          'crc': crc.crc32('IDAT' + idatData)
        };
        chunks.push(idat_chunk);
      }
      chunks.push(chunk);
    }
    output = headerData;
    for (l = 0, len = chunks.length; l < len; l++) {
      chunk = chunks[l];
      output = Buffer.concat([output, bufferpack.pack('L>', [chunk.length])]);
      output = Buffer.concat([output, new Buffer(chunk.type)]);
      output = Buffer.concat([output, new Buffer(chunk.data)]);
      output = Buffer.concat([output, bufferpack.pack('L>', [chunk.crc])]);
    }
    return output;
  };

}).call(this);
